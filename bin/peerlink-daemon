#!/usr/bin/env node

var program = require('commander')
  , pkg = require('../package.json')
  , peerlink = require('../')
  , fs = require('fs')
  , mkdirp = require('mkdirp')
  , path = require('path')
  , main = require('stact')();

var conf = {}
  , watchers = {};

program
  .version(pkg.version)
  .parse(process.argv);

main.add(function (next) {
  console.log('Loading ~/.peerlink.json');
  peerlink.conf.load(function (err, loaded) {
    if (err) return next(err);
    if (loaded) {
      conf = loaded;
      next();
    }
    else {
      conf = {watch: {}, links: []};
      peerlink.conf.save(conf, next);
    }
  });
});

main.add(function (next) {
  console.log('Watching ~/.peerlink.json');

  peerlink.conf.watch();

  peerlink.conf.on('error', function (err) {
    throw err;
  });
  peerlink.conf.on('change', function (changed) {
    if (changed.watch) {
      peerlink.watch.update(conf.watch, changed.watch);
    }
    if (changed.links) {
      peerlink.links.update(conf.links, changed.links);
    }
  });

  peerlink.watch.on('add', function (moduleName, modulePath) {
    console.log('Watchers - Add', moduleName, '=>', modulePath);
    conf.watch[moduleName] = modulePath;
    watchers[moduleName] = peerlink.watch.create(moduleName, modulePath);
  });
  peerlink.watch.on('change', function (moduleName, modulePath) {
    console.log('Watchers - Change', moduleName, '=>', modulePath);
    conf.watch[moduleName] = modulePath;
    if (watchers[moduleName]) {
      watchers[moduleName].removeAllListeners();
      watchers[moduleName].close();
    }
    watchers[moduleName] = peerlink.watch.create(moduleName, modulePath);
  });
  peerlink.watch.on('remove', function (moduleName, modulePath) {
    console.log('Watchers - Remove', moduleName, '=>', modulePath);
    delete conf.watch[moduleName];
    if (watchers[moduleName]) {
      watchers[moduleName].removeAllListeners();
      watchers[moduleName].close();
    }
  });

  peerlink.links.on('add', function (moduleName, linkPath) {
    console.log('Links - Add', moduleName, '=>', linkPath);
    peerlink.conf.addLink(conf.links, moduleName, linkPath);
  });
  peerlink.links.on('remove', function (moduleName, linkPath) {
    console.log('Links - Remove', moduleName, '=>', linkPath);
    peerlink.conf.removeLink(conf.links, moduleName, linkPath);
  });

  next();
});

main.add(function (next) {
  Object.keys(conf.watch).forEach(function (moduleName) {
    watchers[moduleName] = peerlink.watch.create(moduleName, conf.watch[moduleName]);
  });

  // Here's where we watch for file changes, loop through the linked
  // directories and update them.
  peerlink.watch.on('file:changed', function (moduleName, modulePath, ev, file) {
    console.log('Changed:', moduleName + ' [' + modulePath + ']');
    conf.links.forEach(function (link) {
      var src, dest;
      if (link.module === moduleName) {
        // If the linked directory no longer exists, remove the link and abort.
        if (!fs.existsSync(link.path)) {
          peerlink.conf.removeLink(conf.links, link.module, link.path);
          peerlink.conf.save(conf);
          return;
        }

        src = conf.watch[link.module];
        dest = path.join(link.path, 'node_modules', link.module);
        if (!fs.existsSync(dest)) {
          mkdirp.sync(dest);
        }

        try {
          peerlink.change(src, dest, ev, file);
        }
        catch (err) {
          console.err(err);
        }
      }
    });
  });

  console.log('Watching', Object.keys(watchers).length, 'modules');
  next();
});

console.log('Starting peerlink daemon');
main.runSeries(function (err) {
  if (err) throw err;
});
